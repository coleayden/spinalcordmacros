/*Written using ImageJ2/FIJI Version 2.9.0/1.53t, Build a33148d777
date 2024-06-05
For 3-channel images wherein 
Ch1=GFP, 
Ch2=Aspa,
Ch3=lesions*/

//////USE INSTRUCTIONS//////
//To convert .txt to .ijm//
/*right click .txt file -> Get Info -> Name & Extension: replace '.txt' with '.ijm'*/
//To install//
/*open ImageJ -> Plugins -> Install... -> select this macro in .ijm format ->
save in folder, eg 'Analyze' -> restart ImageJ*/
//To use//
/*Open image to analyze -> Plugins -> Analyze -> select macro
-Results will appear in a pop-up "Summary" or "Results" window and will append during processing*/
/*When open probability select Hyperstack, color mode Grayscale, autoscale not checked

//////SET-UP//////
//set scale and measurements
run("Set Scale...", "distance=1 known=0.650 unit=micron global");
run("8-bit");
getDimensions(width, height, channels, slices, frames);
Width = width;
Height = height;

run("Labels...", "color=white font=12");
setForegroundColor(255, 255, 255);
run("Options...", "iterations=1 count=1 black do=Nothing");
setBatchMode(false); 
run("ROI Manager...");
setBatchMode(true); //comment out for slow testing
roiManager("Centered", "false");
roiManager("UseNames", "true");
roiManager("Show All without labels");
roiManager("Show None");


//////DUPLICATE//////
//save original title and rename for code
title = getTitle();
path = getDirectory("image");
rename("Sample");
selectWindow("Sample");
run("Make Subset...", "channels=1,2,4");
selectWindow("Sample");
close();

//Duplicate original image 
selectWindow("Sample-1");
run("Duplicate...", "duplicate stack");

//////PRE-PROCESSING FOR COUNTS//////

selectWindow("Sample-1");
run("Split Channels");

selectWindow("C3-Sample-1");
close();

//Threshold Ch1
selectWindow("C1-Sample-1");
run("Auto Threshold", "method=Moments white");
rename("GFP");

//Threshold Ch2
selectWindow("C2-Sample-1");
run("Auto Threshold", "method=Moments white");
rename("Aspa");

//Combine Ch1 and Ch2 for count both
imageCalculator("Add create", "GFP","Aspa");
rename("GFPandAspa");


//////OUTLINE ROIs//////
selectWindow("Sample-1-1");
setBatchMode("show");
setTool("Polygon");
do {
	waitForUser("Go to channel 3.\nOutline entire section, pressing 't' when done.\nThen click OK.");
} while (roiManager("count") == 0 || roiManager("count") > 1);

roiManager("select", 0);
roiManager("rename", "Whole Section"); 


//////OUTLINE NON-LESION WHITE MATTER//////
selectWindow("Sample-1-1");
setBatchMode("show");
roiManager("Show None");roiManager("Show All");roiManager("Show None");
setTool("Polygon");
do {
	waitForUser("Go to channel 3.\nOutline area of non-lesion white matter and press 't',\nthen click OK");
} while (roiManager("count") == 1 || roiManager("count") > 2);

roiManager("select", 1);
roiManager("rename", "NLWM");


//////OUTLINE LESIONS//////
lesionPresent = false;
multipleLesionsPresent = false;
firstLesionIndex = roiManager("count"); //For looping later

roiManager("Show None");roiManager("Show All");roiManager("Show None");
setTool("Polygon");
do {
        waitForUser("Go to channel 3,\nIf present, outline lesions,\nand pressing 't' after each lesion.\nThen click OK.");
roiManager("deselect");

lastLesionIndex = roiManager("count")-1;

if (roiManager("count") != firstLesionIndex) {
	lesionPresent = true;
}
if (lastLesionIndex > firstLesionIndex) {
	multipleLesionsPresent = true;
}


//////COUNT CELLS IN EACH REGION//////


roiNamesArray = newArray();
roiAreasArray = newArray();

//Count cells in entire section
roiOutputArray = CountCells(0, "Whole Section", 0);
roiNamesArray = Array.concat(roiNamesArray, roiOutputArray[0], roiOutputArray[0], roiOutputArray[0]);
roiAreasArray = Array.concat(roiAreasArray, roiOutputArray[1], roiOutputArray[1], roiOutputArray[1]);

//Count cells in NLWM
roiOutputArray = CountCells(1, "NLWM", 0);
roiNamesArray = Array.concat(roiNamesArray, roiOutputArray[0], roiOutputArray[0], roiOutputArray[0]);
roiAreasArray = Array.concat(roiAreasArray, roiOutputArray[1], roiOutputArray[1], roiOutputArray[1]);


//Count cells in individual lesions
if (lesionPresent) {
	for (i = firstLesionIndex; i < roiManager("count"); i++) {
	lesionName = "L" + i-2;
	roiOutputArray = CountCells(i, lesionName, 0);
	roiNamesArray = Array.concat(roiNamesArray, roiOutputArray[0], roiOutputArray[0], roiOutputArray[0]);
	roiAreasArray = Array.concat(roiAreasArray, roiOutputArray[1], roiOutputArray[1], roiOutputArray[1]);
	}
}
/////FUNCTIONS//////
//count spots in thresholded images
function CountCells(roiIndex, roiName, showOutput) {
	run("Set Measurements...", "area redirect=None decimal=3");

	
	roiManager("Select", roiIndex);
	roiManager("Rename", roiName);
	
	run("Measure");
	roiArea = getResult("Area", nResults-1);
	
	
	roiNameAreaArray = newArray(roiName, roiArea);
	
        selectWindow("GFP");
	roiManager("Select", roiIndex);
	run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 summarize");	
	if (showOutput == 1) {
		roiManager("deselect");roiManager("Show All");roiManager("Show None");
		run("Invert");	
	}	
	
	selectWindow("Aspa");
	roiManager("Select", roiIndex);
	run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 summarize");
	if (showOutput == 1) {
		roiManager("deselect");roiManager("Show All");roiManager("Show None");
		run("Invert");	
	}
	
        selectWindow("GFPandAspa");
	roiManager("Select", roiIndex);
	run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 summarize");	
	if (showOutput == 1) {
		roiManager("deselect");roiManager("Show All");roiManager("Show None");
		run("Invert");	
	}
	return roiNameAreaArray;
}

//Add ROI and Area to Summary table and delete unneeded columns
Table.setColumn("ROI", roiNamesArray, "Summary");
Table.setColumn("ROI Area", roiAreasArray, "Summary");

Table.deleteColumn("Total Area", "Summary");
Table.deleteColumn("Average Size", "Summary");
Table.deleteColumn("%Area", "Summary");


//////CALCULATE COUNTS PER mm^2//////
Table.rename("Summary", "Results");

roiDensityArray = newArray();
for (i = 0; i < nResults; i++) {
	roiCount = getResult("Count", i);
	roiArea = getResult("ROI Area", i);
	roiDensity = roiCount / roiArea * 1000000;
	roiDensityArray = Array.concat(roiDensityArray, roiDensity);
}

Table.setColumn("Count/mm^2", roiDensityArray, "Results");


//////MAKE QA IMAGE//////


selectWindow("Aspa");
roiManager("Select", 0);
run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 show=[Bare Outlines]");
roiManager("deselect");roiManager("Show All");roiManager("Show None");
run("Invert");
rename("Drawing of Aspa");	
	
	
selectWindow("GFP");
roiManager("Select", 0);
run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 show=[Bare Outlines]");	
roiManager("deselect");roiManager("Show All");roiManager("Show None");
run("Invert");	
rename("Drawing of GFP");


selectWindow("GFPandAspa");
roiManager("Select", 0);
run("Analyze Particles...", "size=20-Infinity pixel circularity=0.1-1.0 show=[Bare Outlines]");	
roiManager("deselect");roiManager("Show All");roiManager("Show None");
run("Invert");	
rename("Drawing of GFPandAspa");


roiManager("deselect");roiManager("Show All");roiManager("Show None");
selectImage("GFP");
close;
selectImage("Aspa");
close;

selectWindow("Sample-1-1");
run("Split Channels");

selectWindow("C3-Sample-1-1");
rename("Lesion original");


run("Merge Channels...", "c1=[Drawing of Aspa] c4=C2-Sample-1-1");
rename("Aspa+Counts");

run("Merge Channels...", "c1=[Drawing of GFP] c4=C1-Sample-1-1");
rename("GFP+Counts");

run("Merge Channels...", "c1=[Drawing of GFPandAspa] c4=GFPandAspa");
rename("GFPAspaCounts");

run("Images to Stack", "name=title use");
rename(title+"_QA");
setBatchMode("show");

roiManager("reset");
selectWindow("ROI Manager");
run("Close");


/// whenfinished save results and run("Fresh Start");

